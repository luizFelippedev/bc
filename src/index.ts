// src/index.ts - Ponto de entrada principal da aplica√ß√£o
import 'dotenv/config';
import { LoggerService } from './services/LoggerService';
import { DatabaseService } from './services/DatabaseService';
import { CacheService } from './services/CacheService';
import { App } from './app';

const logger = LoggerService.getInstance();

async function startServer(): Promise<void> {
  try {
    logger.info('üöÄ Iniciando Portfolio Backend...');

    // Verificar Node.js version
    const nodeVersion = process.version;
    const requiredVersion = '18.0.0';
    const currentVersionNumber = nodeVersion.slice(1); // Remove 'v'
    
    if (currentVersionNumber < requiredVersion) {
      throw new Error(
        `Node.js ${requiredVersion} ou superior √© necess√°rio. Vers√£o atual: ${nodeVersion}`
      );
    }

    logger.info(`Node.js vers√£o: ${nodeVersion}`);
    logger.info(`Ambiente: ${process.env.NODE_ENV || 'development'}`);
    logger.info(`Porta: ${process.env.PORT || 5000}`);

    // Verificar vari√°veis de ambiente cr√≠ticas
    const criticalEnvVars = ['MONGODB_URI', 'JWT_SECRET'];
    const missingVars = criticalEnvVars.filter(
      (varName) => !process.env[varName]
    );

    if (missingVars.length > 0) {
      throw new Error(
        `Vari√°veis de ambiente obrigat√≥rias n√£o definidas: ${missingVars.join(', ')}`
      );
    }

    // ‚úÖ CORRE√á√ÉO: Melhor tratamento de conex√µes
    logger.info('üì° Conectando aos servi√ßos...');
    
    // Conectar ao MongoDB
    try {
      const database = DatabaseService.getInstance();
      await database.connect();
      logger.info('‚úÖ MongoDB conectado com sucesso');
    } catch (error) {
      logger.error('‚ùå Falha ao conectar MongoDB:', error);
      throw error;
    }

    // Conectar ao Redis (opcional)
    try {
      const cache = CacheService.getInstance();
      await cache.connect();
      logger.info('‚úÖ Redis conectado - cache habilitado');
    } catch (error) {
      logger.warn('‚ö†Ô∏è  Redis n√£o dispon√≠vel - continuando sem cache externo:', error);
    }

    // ‚úÖ Inicializar aplica√ß√£o
    const app = new App();
    await app.start();

    // Configurar graceful shutdown
    setupGracefulShutdown(app);

  } catch (error) {
    logger.error('‚ùå Falha cr√≠tica ao iniciar aplica√ß√£o:', error);
    
    // Tentar limpar recursos antes de sair
    try {
      await cleanup();
    } catch (cleanupError) {
      logger.error('‚ùå Erro durante limpeza:', cleanupError);
    }
    
    process.exit(1);
  }
}

// ‚úÖ Fun√ß√£o para limpeza de recursos
async function cleanup(): Promise<void> {
  try {
    logger.info('üßπ Limpando recursos...');
    
    const database = DatabaseService.getInstance();
    await database.disconnect();
    logger.info('‚úÖ MongoDB desconectado');
    
    const cache = CacheService.getInstance();
    await cache.disconnect();
    logger.info('‚úÖ Redis desconectado');
    
  } catch (error) {
    logger.error('‚ùå Erro durante cleanup:', error);
  }
}

// ‚úÖ Configurar graceful shutdown
function setupGracefulShutdown(app: App): void {
  const gracefulShutdown = async (signal: string) => {
    logger.info(`üì¥ Recebido sinal ${signal}. Iniciando shutdown graceful...`);
    
    try {
      // Parar de aceitar novas conex√µes
      await app.shutdown();
      
      // Limpar recursos
      await cleanup();
      
      logger.info('üëã Servidor encerrado com sucesso');
      process.exit(0);
      
    } catch (error) {
      logger.error('‚ùå Erro durante shutdown graceful:', error);
      process.exit(1);
    }
  };

  // Registrar handlers de shutdown
  process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
  process.on('SIGINT', () => gracefulShutdown('SIGINT'));
  
  // Handler para Windows
  if (process.platform === 'win32') {
    process.on('SIGBREAK', () => gracefulShutdown('SIGBREAK'));
  }
}

// ‚úÖ Manipuladores de erro n√£o capturado
process.on('uncaughtException', (error: Error) => {
  logger.error('üî• Exce√ß√£o n√£o capturada:', {
    message: error.message,
    stack: error.stack,
    name: error.name
  });
  
  // Dar tempo para logs serem escritos
  setTimeout(() => {
    process.exit(1);
  }, 1000);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  logger.error('üî• Promise rejeitada n√£o tratada:', {
    reason: reason,
    promise: promise.toString()
  });
  
  // Dar tempo para logs serem escritos
  setTimeout(() => {
    process.exit(1);
  }, 1000);
});

// ‚úÖ Handler para avisos
process.on('warning', (warning) => {
  logger.warn('‚ö†Ô∏è Node.js Warning:', {
    name: warning.name,
    message: warning.message,
    stack: warning.stack
  });
});

// ‚úÖ Log de informa√ß√µes do processo na inicializa√ß√£o
logger.info('üîß Informa√ß√µes do processo:', {
  pid: process.pid,
  platform: process.platform,
  arch: process.arch,
  nodeVersion: process.version,
  memoryUsage: process.memoryUsage()
});

// üöÄ Iniciar aplica√ß√£o
startServer().catch((error) => {
  logger.error('üí• Erro fatal na inicializa√ß√£o:', error);
  process.exit(1);
});